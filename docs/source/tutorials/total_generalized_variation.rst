.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_total_generalized_variation.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_tutorials_total_generalized_variation.py:


04. Total Generalized Variation
===============================
Now we take a step deeper into Total Variation based regularization.

We focus on concepts from different papers.
Mainly we use for numerical access:
    Knoll, Bredis, Pock: Second Order Total Generalized Variation (TGV) for MRI

The first order Total Variation got some problems with smooth edges.
See following noisy example with the TV-Regularization.


.. code-block:: default

    import numpy as np
    import matplotlib.pyplot as plt

    from recon.interfaces import Smoothing
    size = 256
    small_size = 168

    # build image
    image = np.reshape(np.array([(x/size) for x in range(size)]*size), (size, size))
    image[40:small_size+40, 40:small_size+40] = \
        np.reshape(np.array([(1-x/small_size)for x in range(small_size)]*small_size), (small_size, small_size))

    noise_image = image + 0.1*np.random.uniform(-1,1, size=image.shape)

    tv_denoising = Smoothing(domain_shape=image.shape, reg_mode='tv', lam=0.5, alpha=0.5)
    tv_solution = tv_denoising.solve(noise_image)

    f = plt.figure(figsize=(6, 3))
    f.add_subplot(1, 2, 1)
    plt.gray()
    plt.axis('off')
    plt.imshow(noise_image)
    plt.title("Noisy")
    f.add_subplot(1, 2, 2)
    plt.gray()
    plt.imshow(tv_solution)
    plt.title("TV based denoising")
    plt.axis('off')
    plt.show()






.. image:: /tutorials/images/sphx_glr_total_generalized_variation_001.png
    :alt: Noisy, TV based denoising
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Primal-Dual Algorithm: [                                        ]--------------------]




To avoid strong stair-casing effects, we introduce the Total Generalized Variation.
At this point there is no interface for second order TV. We implement it direct with the
adapted Primal-Dual algorithm.


.. code-block:: default


    from recon.solver.pd_hgm_extend import PdHgmTGV

    # TGV smoothing small alpha
    alpha = (0.5, 0.1)
    solver = PdHgmTGV(alpha=alpha, lam=0.5)
    tgv_solution = np.reshape(solver.solve(noise_image), (size, size))

    f = plt.figure(figsize=(9, 3))
    f.add_subplot(1, 3, 1)
    plt.gray()
    plt.axis('off')
    plt.imshow(image)
    plt.title("Original")
    f.add_subplot(1, 3, 2)
    plt.gray()
    plt.axis('off')
    plt.imshow(tv_solution)
    plt.title("TV based denoising")
    f.add_subplot(1, 3, 3)
    plt.gray()
    plt.imshow(tgv_solution)
    plt.title("TGV based denoising")
    plt.axis('off')
    plt.show()





.. image:: /tutorials/images/sphx_glr_total_generalized_variation_002.png
    :alt: Original, TV based denoising, TGV based denoising
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    0.7480454357997012
    0.6438136054626131
    0.7723742506921137
    0.6903569417796388
    0.7407110921835155





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.069 seconds)


.. _sphx_glr_download_tutorials_total_generalized_variation.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: total_generalized_variation.py <total_generalized_variation.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: total_generalized_variation.ipynb <total_generalized_variation.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
